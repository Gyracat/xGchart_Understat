# -*- coding: utf-8 -*-
"""xG Cumulative Chart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-IZ78o6vT2v5AjQkHb5wiG1zB_63ipn7
"""

pip install highlight_text

pip install Pillow

import pandas as pd
from PIL import Image
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.patheffects as path_effects
import matplotlib.patches as mpatches
import matplotlib.image as mpimg
from matplotlib import rcParams
from matplotlib.patches import Arc
import numpy as np
from highlight_text import fig_text
import seaborn as sns
import requests
from bs4 import BeautifulSoup
import json

# link
link = "https://understat.com/match/21934"
res = requests.get(link)
soup = BeautifulSoup(res.content,'lxml')
scripts = soup.find_all('script')

# Get the shotsData, it's the second script executed in order
strings = scripts[1].string

# Getting rid of unnecessary characters from json data
ind_start = strings.index("('")+2
ind_end = strings.index("')")
json_data = strings[ind_start:ind_end]
json_data = json_data.encode('utf8').decode('unicode_escape')
shots_match = json.loads(json_data)

# Creatinf the 2 dfs

df_away = pd.DataFrame(shots_match['a'])
df_home = pd.DataFrame(shots_match['h'])

# Selecting only the useful columns

df_away = df_away[['minute','player',"a_team",'result','xG','h_a']]
df_home = df_home[['minute','player',"h_team",'result','xG','h_a']]

# Renaming columns

df_away.rename(columns={"a_team": "team"})
df_home.rename(columns={"h_team": "team"})

# Changing data types

df_away = df_away.astype({"xG": float, "minute": float})
df_home = df_home.astype({"xG": float, "minute": float})

# Creating new column xG cumulative
df_away['xGcum'] = np.cumsum(df_away['xG'])
df_home['xGcum'] = np.cumsum(df_home['xG'])

# creating the dictionaries
x = df_home[df_home['result']=='Goal']['minute'].tolist()
x1 = df_away[df_away['result']=='Goal']['minute'].tolist()
y =df_home[df_home['result']=='Goal']['xGcum'].tolist()
y1 = df_away[df_away['result']=='Goal']['xGcum'].tolist()

# xG inside the scatterplots
y_plot =np.round(df_home[df_home['result']=='Goal']['xG'],2).tolist()
y1_plot = np.round(df_away[df_away['result']=='Goal']['xG'],2).tolist()

# Annotation text
text_home = df_home[df_home['result']=='Goal']['player'].tolist()
text_away = df_away[df_away['result']=='Goal']['player'].tolist()
label_home = df_home['h_team'].unique().tolist()
label_away = df_away['a_team'].unique().tolist()

# More annotation text
xGcum_away = str(np.round(df_away['xGcum'].iloc[-1],3))
xGcum_home = str(np.round(df_home['xGcum'].iloc[-1],3))
team_away = str(df_away['a_team'].iloc[-1])
team_home = str(df_home['h_team'].iloc[-1])

import matplotlib.pyplot as plt
from PIL import Image

# Function to convert names to the desired format
def format_name(name):
    parts = name.split()
    if len(parts) > 1:
        first_name = parts[0]
        last_name = parts[-1]
        return f"{first_name[0]}. {last_name}"
    return name


# Apply the function to format player names
text_home = [format_name(player) for player in text_home]
text_away = [format_name(player) for player in text_away]



# Plot setup
plt.style.use('fivethirtyeight')
fig, ax = plt.subplots(figsize=(16, 8))



# Calculate the number of goals scored by each team
goals_home = len(x)
goals_away = len(x1)


# Integrate the goals scored into the title
title = "Cumulative xG Match | Arsenal {}-{} Man United\n".format(goals_home, goals_away)
fig_text(0.08, 1.03, s=title, fontsize=25, fontweight="bold")

# The rest remains the same
fig_text(0.08, 0.97, s=" <{} {} xG> vs <{} {} xG>".format(team_home, xGcum_home, team_away, xGcum_away), highlight_textprops=[{"color": 'red'}, {'color': "black"}], fontsize=20, fontweight="light")



# Step plot for Home and Away teams
ax.step(x=df_home['minute'], y=df_home['xGcum'], where='post', color='red', linewidth=4.0)
ax.step(x=df_away['minute'], y=df_away['xGcum'], where='post', color='black', linewidth=4.0)

# Scatter plots
ax.scatter(x, y, color='red', edgecolor='black', s=955, label="Arsenal", linewidths=1.5)
ax.scatter(x1, y1, color='black', edgecolor='black', s=955, label=" Man United", linewidths=1.5)

# Fill areas
plt.fill_between(x, y, alpha=0.08, color='red')
plt.fill_between(x1, y1, alpha=0.08, color='black')

# Text annotations for players, their individual shot xG values, and cumulative xG
for xi, cum_xG, shot_xG, player in zip(x, y, y_plot, text_home):
    if cum_xG > 0:  # assuming xG > 0 means it's a shot
        annotation_text = f"{player} :{cum_xG:.2f} (xG shot {shot_xG:.2f})"
        ax.annotate(annotation_text, (xi-3, cum_xG+0.2), c='black', size=12, ha='center', va='center', fontweight='bold')

for xi, cum_xG, shot_xG, player in zip(x1, y1, y1_plot, text_away):
    if cum_xG > 0:  # assuming xG > 0 means it's a shot
        annotation_text = f"{player} :{cum_xG:.2f} (xG shot {shot_xG:.2f})"
        ax.annotate(annotation_text, (xi-3, cum_xG+0.2), c='black', size=12, ha='center', va='center', fontweight='bold')

# text
fig_text(0.5,0.01, s="Minute\n", fontsize = 24, fontweight = "bold", color = "black")
fig_text(0.01,0.6, s="xG\n", fontsize = 24, fontweight = "bold", color = "black",rotation=90)
fig_text(0.25,0.9, s="First Half\n", fontsize = 18, fontweight = "bold", color = "black")
fig_text(0.75,0.9, s="Second Half\n", fontsize = 18, fontweight = "bold", color = "black")

#Credit
fig.text(0.99, 0.001, 'Create by Saran DATAFPL | Source:opta', ha='right', va='bottom',
         fontsize=12, color='black', alpha=0.7)

# Finally a dotted line to separate the HT
plt.vlines( ymin=0, ymax=4,x=45, color='black', alpha=0.1,linestyle="solid")




# Display the plot
plt.show()

"""แบบเน้นกราฟไม่ขยายกราฟ

"""